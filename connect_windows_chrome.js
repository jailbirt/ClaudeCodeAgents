const { chromium } = require('playwright');

async function connectToWindowsChrome() {
  console.log('Conectando al Chrome de Windows...\n');
  console.log('‚ö†Ô∏è  IMPORTANTE: Primero debes iniciar Chrome en Windows con debugging habilitado:');
  console.log('   1. Cierra todas las instancias de Chrome');
  console.log('   2. Abre CMD o PowerShell en Windows');
  console.log('   3. Ejecuta: chrome.exe --remote-debugging-port=9222');
  console.log('   O usa el archivo launch_chrome_debug.bat que creamos\n');
  
  console.log('Intentando conectar en 5 segundos...\n');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  try {
    // Conectar al Chrome existente via CDP (Chrome DevTools Protocol)
    console.log('üîå Conectando a Chrome en localhost:9222...');
    const browser = await chromium.connectOverCDP('http://localhost:9222');
    
    console.log('‚úÖ ¬°Conectado exitosamente a tu Chrome de Windows!');
    
    // Obtener contextos y p√°ginas existentes
    const contexts = browser.contexts();
    console.log(`üìë Contextos encontrados: ${contexts.length}`);
    
    // Usar el primer contexto o crear uno nuevo
    const context = contexts[0] || await browser.newContext();
    
    // Obtener p√°ginas abiertas
    const pages = context.pages();
    console.log(`üìÑ Pesta√±as abiertas: ${pages.length}`);
    
    // Usar la primera p√°gina o crear una nueva
    let page;
    if (pages.length > 0) {
      page = pages[0];
      console.log('   Usando pesta√±a existente');
    } else {
      page = await context.newPage();
      console.log('   Creando nueva pesta√±a');
    }
    
    // Navegar a 123seguros.com.ar
    console.log('\nüåê Navegando a 123seguros.com.ar...');
    await page.goto('https://www.123seguros.com.ar');
    
    console.log('‚úÖ Navegaci√≥n exitosa');
    console.log('\nüìå Ahora puedes:');
    console.log('   - Interactuar manualmente con la p√°gina');
    console.log('   - El script puede automatizar acciones');
    console.log('   - Tu sesi√≥n de Chrome se mantiene (cookies, login, etc.)');
    
    // Buscar opciones de seguro completo
    console.log('\nüîç Buscando opciones de seguro completo...');
    
    await page.waitForTimeout(3000);
    
    // Intentar hacer clic en cotizar
    try {
      await page.click('button:has-text("Cotizar")', { timeout: 5000 });
      console.log('‚úì Click en bot√≥n Cotizar');
    } catch (e) {
      console.log('‚Üí Bot√≥n Cotizar no encontrado');
    }
    
    // Buscar seguro completo
    try {
      const completo = await page.$('text=/completo|todo.*riesgo/i');
      if (completo) {
        await completo.click();
        console.log('‚úì Opci√≥n de seguro completo encontrada');
      }
    } catch (e) {
      console.log('‚Üí Contin√∫a manualmente para seleccionar seguro completo');
    }
    
    console.log('\n‚úÖ Chrome conectado y listo');
    console.log('El script permanecer√° activo. Presiona Ctrl+C para desconectar.\n');
    
    // Mantener la conexi√≥n activa
    await new Promise(() => {});
    
  } catch (error) {
    console.error('\n‚ùå Error al conectar:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Soluci√≥n:');
      console.log('1. Aseg√∫rate de que Chrome est√© ejecut√°ndose con --remote-debugging-port=9222');
      console.log('2. Verifica que no haya firewall bloqueando el puerto 9222');
      console.log('3. Prueba ejecutar el archivo launch_chrome_debug.bat');
    }
  }
}

connectToWindowsChrome().catch(console.error);